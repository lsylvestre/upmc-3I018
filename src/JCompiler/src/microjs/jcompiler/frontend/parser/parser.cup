package microjs.jcompiler.frontend.parser;

import java.util.List;
import java.util.LinkedList;

import java_cup.runtime.*;
import microjs.jcompiler.frontend.lexer.Lexer;
import microjs.jcompiler.frontend.ast.*;

parser code {: public Prog resultat = null; :}

terminal SEMICOL, DOT, COMMA, LPAREN, RPAREN, LCURLY, RCURLY, LBRACKET, RBRACKET,
         VAR, LET, EQ,FUNCTION, LAMBDA, IF, ELSE, WHILE, DO,
         PLUS, MINUS, TIMES, DIV, RETURN, UMINUS, MOD, POW, EQEQ, EQEQEQ, DIFEQ, DIFEQEQ, 
         INF, SUP, INFEQ, SUPEQ;

terminal String IDENTIFIER;
terminal Integer INT;
terminal Boolean BOOL;

non terminal Symbol program;
non terminal List<Statement> statements;
non terminal Statement statement, opened_statement, closed_statement;
non terminal Expr expr;
non terminal Statement function;
non terminal List<Statement> block;
non terminal List<String> parameters;
non terminal List<Expr> expressions;
non terminal List<Expr> arguments;

precedence left EQEQ, EQEQEQ, DIFEQ, DIFEQEQ;
precedence nonassoc INF, SUP, INFEQ, SUPEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence right POW;
precedence left UMINUS;
precedence left DOT;
precedence nonassoc LPAREN, RPAREN; // autrement, bug -> return (n*fact)((n-1));

start with program;

program ::=
  /*** empty ***/    {: resultat = new Prog("", new LinkedList<Statement>(), null, null);
                        RESULT   = null; :}
  | statements:prog  {: resultat = new Prog("", prog, progxleft, progxright);
                        RESULT   = null; :}
  ;

statements ::= /*** pas de vide ***/
    statement:st
            {: LinkedList<Statement> tmp = new LinkedList<Statement>();
               if (st != null) { tmp.add(st); }
               RESULT = tmp; :}
  | statement:st statements:sts
	        {: if (st != null) { ((LinkedList<Statement>) sts).addFirst(st);}
               RESULT = sts; :}
  | LET:l  IDENTIFIER:var  EQ  expr:e  SEMICOL
	        {: LinkedList<Statement> tmp = new LinkedList<Statement>();
               tmp.add(new Let(var, e, new LinkedList<Statement>(), lxleft, exright));
	           RESULT = tmp; :}
  | LET:l  IDENTIFIER:var  EQ  expr:e  SEMICOL statements:sts
	        {: LinkedList<Statement> tmp = new LinkedList<Statement>();
               tmp.add(new Let(var, e, sts, lxleft, stsxright));
	           RESULT = tmp; :}
  ;

statement ::=
    SEMICOL                        {: RESULT = null; :}
  | opened_statement:ost  SEMICOL  {: RESULT = ost; :}
  | closed_statement:cst           {: RESULT = cst; :}
  ;

opened_statement ::=
    VAR:v  IDENTIFIER:var  EQ  expr:e  {: RESULT = new Var(var, e, vxleft, exright); :}
  | IDENTIFIER:id  EQ  expr:e          {: RESULT = new Assign (id, e, idxleft, exright); :}
  | expr:e                             {: RESULT = new VoidExpr(e, exleft, exright); :}
  | RETURN:r expr:e                    {: RESULT = new Return(e, rxleft, exright); :}
  ;


closed_statement ::=
    IF:i  LPAREN  expr:cond  RPAREN  block:thens
            {: RESULT = new If(cond,thens, new LinkedList<Statement>(), ixleft, thensxright); :}
  | IF:i  LPAREN  expr:cond  RPAREN  block:thens  ELSE  block:elses
            {: RESULT = new If(cond, thens, elses, ixleft, elsesxright); :}
  | WHILE:w  LPAREN  expr:cond  RPAREN block:body
            {: RESULT = new While(cond, body,wxleft,bodyxright); :}
  | function:f  {: RESULT = f; :}
  ;

function ::=
    FUNCTION:f IDENTIFIER:id  LPAREN  RPAREN  block:body
            {: RESULT = new Function(id, new LinkedList<String>(), body, fxleft, bodyxright); :}
  | FUNCTION:f  IDENTIFIER:id  LPAREN  parameters:params  RPAREN  block:body
            {: RESULT = new Function(id, params, body, fxleft, bodyxright); :}
  ;

block ::=
    LCURLY  RCURLY                 {: RESULT = new LinkedList<Statement>(); :}
  | LCURLY statements:sts  RCURLY  {: RESULT = sts; :}
  ;


parameters ::=		/***** pas de vide () ou de (...;;;...) *****/
    IDENTIFIER:id                          {: LinkedList<String> tmp = new LinkedList<>();
                                              tmp.add(id);
                                              RESULT = tmp; :}
  | parameters:params COMMA IDENTIFIER:id  {: ((LinkedList<String>)params).add(id);
	                                            RESULT = params; :}
  ;

expr ::=
    INT:n   {: RESULT = new IntConst(n, nxleft, nxright);  :}
  | BOOL:b  {: RESULT = new BoolConst(b, bxleft, bxright); :}
  | expr:l  PLUS    expr:r {: RESULT = new BinOp("+", l, r, lxleft, rxright);   :}
  | expr:l  MINUS   expr:r {: RESULT = new BinOp("-", l, r, lxleft, rxright);   :}
  | expr:l  TIMES   expr:r {: RESULT = new BinOp("*", l, r, lxleft, rxright);   :}
  | expr:l  DIV     expr:r {: RESULT = new BinOp("/", l, r, lxleft, rxright);   :}
  | expr:l  MOD     expr:r {: RESULT = new BinOp("mod", l, r, lxleft, rxright); :}
  | expr:l  POW     expr:r {: RESULT = new BinOp("**", l, r, lxleft, rxright);  :}
  | expr:l  EQEQ    expr:r {: RESULT = new BinOp("==", l, r, lxleft, rxright);  :}
  | expr:l  EQEQEQ  expr:r {: RESULT = new BinOp("===", l, r, lxleft, rxright); :}
  | expr:l  DIFEQ   expr:r {: RESULT = new BinOp("==", l, r, lxleft, rxright);  :}
  | expr:l  DIFEQEQ expr:r {: RESULT = new BinOp("!==", l, r, lxleft, rxright); :}
  | expr:l  INF     expr:r {: RESULT = new BinOp("<", l, r, lxleft, rxright);   :}
  | expr:l  SUP     expr:r {: RESULT = new BinOp(">", l, r, lxleft, rxright);   :}
  | expr:l  INFEQ   expr:r {: RESULT = new BinOp("<=", l, r, lxleft, rxright);  :}
  | expr:l  SUPEQ   expr:r {: RESULT = new BinOp(">=", l, r, lxleft, rxright);  :}
  | expr:fun  LPAREN:l  RPAREN:r
            {: RESULT = new Funcall(fun, new LinkedList<Expr>(), funxleft, rxright); :}
  | expr:fun  LPAREN  arguments:args  RPAREN
            {: RESULT = new Funcall(fun, args, funxleft, argsxright); :}
  | LAMBDA:l  LPAREN  parameters:params  RPAREN  block:body
            {: RESULT = new Lambda(params, body, lxleft, bodyxright); :}
  | IDENTIFIER:var
            {: RESULT = new EVar(var, varxleft, varxright); :}
  | LPAREN expr:e  RPAREN {: RESULT = e; :}
  | LBRACKET expr:a COMMA expr:b RBRACKET
            {: RESULT = new Pair(a,b, axleft, bxright); :}
  | expr:l DOT IDENTIFIER:id
            {: RESULT = new Access(l,id,lxleft, idxright); :}
  ;


arguments ::=		/***** pas de vide () ou de (...,,,...) *****/
    expr:e
        {: LinkedList<Expr> tmp = new LinkedList<Expr>();
           tmp.add(e);
	       RESULT = tmp; :}
  | arguments:args  COMMA  expr:e
	    {: ((LinkedList<Expr>)args).add(e);
           RESULT = args; :}
 ;
